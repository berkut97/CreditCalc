/**
*Обьявление пакета
*/
package form.creditor; 
/**
*Добавление библеотек графического интерфейса
*/
import java.awt.*; 
/**
*добавление библиотек для создания графического интерфейса
*/
import javax.swing.*; 
/**
*Добавление библеотек графического интерфеса событий
*/
import java.awt.event.*;
/**
*Добавление класса для расчета кредита
*/
import main.CalcClassic;
/**
*Добавление класса ФормМенеджер
*/
import main.FormManager;
/**
*Объявление класса для реализации формы Кредитор
*/
public class Creditor extends JFrame {
/**
* Создание конструктора Кредитор
*/
public Creditor(FormManager manager) {
/**
*Обьявление имени формы
*/
setTitle("Кредитор");
/**
* Установка размеров для окна Кредитор
*/
setPreferredSize(new Dimension(500,400));
/**
* Установка оптимального размера для диалоговых окон
*/
pack();
/**
* Задание параметров установки панели
*/
getContentPane().setLayout(null);
/**
* Объвление текстового поля Сумма
*/
JTextField Summ = new JTextField();
/**
* Установка местоположения текстового поля Сумма и добавление в него записи "10000"
*/
method.Method.TextField(Summ,"10000",200, 52, 86, 20, 10);
/**
* Добавление текстового поля Сумма на форму
*/
getContentPane().add(Summ);

/**
* Объвление текстового поля Год
*/
JTextField Age = new JTextField();
/**
* Установка местоположения текстового поля Год
*/
method.Method.TextField(Age, "",201, 120, 86, 20, 10);
/**
* Добавление текстового поля Год на форму
*/
getContentPane().add(Age);

/**
* Объявление текстового поля Оплата
*/
JTextField Payment = new JTextField();
/**
* Установка местоположения текстового поля Оплата
*/
method.Method.TextField(Payment, "",201, 296, 86, 20, 10);
/**
* Добавление текстового поля Оплата на форму
*/
getContentPane().add(Payment);
/**
* Объвление текстового поля Доход
*/
JTextField Income = new JTextField();
/**
* Установка местоположения текстового поля Доход
*/
method.Method.TextField(Income, "",201, 188, 86, 20, 10);
/**
* Добавление текстового поля Доход на форму
*/
getContentPane().add(Income);

/**
* Объвление текстового поля Статус
*/
JTextField Status = new JTextField();
/**
* Установка местоположения текстового поля Статус
*/
method.Method.TextField(Status, "",201, 262, 180, 20, 10);
/**
* Добавление текстового поля Статус на форму
*/
getContentPane().add(Status);
/**
* Создание надписи "Руб" и установка местоположения
*/
Label("Руб.",317, 55, 46, 14, 11);
/**
* Создание надписи "Сумма кредита" и установка местоположения
*/
Label("Сумма кредита",22, 49, 151, 23, 15);
/**
* Создание надписи "Кредитор" и установка местоположения
*/
Label("Кредитор",201, 11, 85, 29, 18);
/**
* Создание надписи "Срок кредитования" и установка местоположения
*/
Label("Срок кредитования",22, 83, 151, 23, 15);
/**
* Создание надписи "Ежемесячный платеж" и установка местоположения
*/
Label("Ежемесячный платеж",22, 293, 161, 23, 15);
/**
* Создание надписи "Категория заемщика" и установка местоположения
*/
Label("Категория заемщика",22, 151, 151, 23, 15);
/**
* Создание надписи "Руб" и установка местоположения
*/
Label("Руб.",317, 299, 46, 14, 11);
/**
* Создание надписи "Возраст" и установка местоположения
*/
Label("Возраст",22, 117, 151, 23, 15);
/**
* Создание надписи "Основной доход" и установка местоположения
*/
Label("Основной доход",22, 185, 151, 23, 15);
/**
* Создание надписи "Статус кредита" и установка местоположения
*/
Label("Статус кредита",22, 259, 151, 23, 15);
/**
* Создание надписи "Руб" и установка местоположения
*/
Label("Руб.",317, 191, 46, 14, 11);
/**
* Объвление кнопки Выход
*/
JButton Close = new JButton("Выход");
/**
* Установка местоположения кнопки Выход
*/
method.Method.Button(Close,394, 329, 80, 23, 15);
/**
* Добавление кнопки Выход на форму
*/
getContentPane().add(Close);
/**
* Обработка событий для кнопки Выход
*/
Close.addActionListener(new ActionListener() {
/**
* Создание события для кнопки Выход
*/
public void actionPerformed(ActionEvent arg0) {
/**
* Вызов вспомогательного класса для управление формами
* Закртытие формы Кредитор и открытия формы Эскобар
*/
manager.toggleForms1();
/**
* Завершение работы методов управления
*/
}
/**
* Закрытие события для кнопки Выход
*/
});
/**
* Объвление выподающего списка Год
*/
JComboBox Years = new JComboBox();
/**
* Установка местоположения выподающего списка Год
*/
method.Method.ComboBox(Years,false,201, 86, 69, 20);
/**
*Добавление выподающего списка Год на форму
*/
getContentPane().add(Years);
/**
* Добавление элементов к выпадающему списку
*/
Years.setModel(new DefaultComboBoxModel(new String[] {"1 год", "2 года", "3 года", "4 года", "5 лет"}));
/**
* Объявление выподающего списка Месяцы
*/
JComboBox Months = new JComboBox();
/**
* Установка местоположения выподающего списка Месяцы
*/
method.Method.ComboBox(Months,false,280, 86, 69, 20);
/**
* Добавление выподающего списка Мысяцы на форму 
*/
getContentPane().add(Months);
/**
* Добавление элементов к выпадающему списку
*/
Months.setModel(new DefaultComboBoxModel(new String[] {"0 мес", "1 мес", "2 мес", "3 мес", "4 мес", "5 мес", "6 мес", "7 мес", "8 мес", "9 мес", "10 мес", "11 мес"}));
/**
* Объявление выподающего списка Категория
*/
JComboBox Category = new JComboBox();
/**
* Установка местоположения выподающего списка Категория
*/
method.Method.ComboBox(Category,false,201, 154, 241, 20);
/**
* Добавление выподающего списка Категория на форму 
*/
getContentPane().add(Category);
/**
*  Добавление элементов к выпадающему списку Категория
*/
Category.setModel(new DefaultComboBoxModel(new String[] {"Получатель зарплаты в банке","Получатель пенсии в банке","Общие условия"}));

/**
* Объявление кнопки Рассчитать
*/		
JButton Сalculation = new JButton("Рассчитать");
/**
* Установка местоположения кнопки  Рассчитать
*/
method.Method.Button(Сalculation,10, 327, 116, 23, 15);
/**
* Обработка событий для кнопки Рассчитать
*/
Сalculation.addActionListener(new ActionListener() {
/**
* Создание события для кнопки Рассчитать
*/
public void actionPerformed(ActionEvent arg0) {
/**
*Объявление объекта для рассчета кредита
*/
CalcClassic cc = new CalcClassic();
/**
* Объявление переменной для вычисления процентной ставки 
*/
double bet = 0;
/**
* Объявление новой переменной Месяцы
*/
int month = 0;
/**
* Объявление новой переменной Годы
*/
int year = 0; 
/**
* Объявление переменной Сум и присваивание ей значения из тектового поля Сумма
*/
int sum = Integer.parseInt(Summ.getText());
/**
*  Добавление перменной Основоной доход и присваивание ей значения из текстового поля Доход
*/
int mainProfit = Integer.parseInt(Income.getText());
/**
* Объявление переменной Года и присваивание ей значения из выподающего списка годы
*/
int oftheyear = Years.getSelectedIndex();
/**
* Объявление переменной Месяцы и присваивание ей значения из выподающего списка Месяцы
*/
int months = Months.getSelectedIndex();
/**
* Объвление переменной Категория заемщика и присваивание ей значения из выподающего списка Категория
*/
int CategoryBorrower = Category.getSelectedIndex();
/**
* Использование оператора выбора для определения процентной ставки
*/
switch(CategoryBorrower){
/**
* Определение числа месцев для кейса 1 означающего процентную ставку в размере 1.15
*/
case 0: bet = 0.15; break;
/**
* Определение числа месцев для кейса 2 означающего процентную ставку в размере 1.12
*/
case 1: bet = 0.12; break;
/**
* Определение числа месцев для кейса 3 означающего процентную ставку в размере 1.18
*/
case 2: bet = 0.18; break;
/**
* Завершение работы оператора выбора
*/
}
/**
* Использование оператора выбора для определения числа лет
*/
switch(oftheyear){ 
/**
* Определение числа месяцев для кейса 0 означающего 1 год
*/
case 0: year = 12; break;
/**
* Определение числа месяцев для кейса 1 означающего 2 года
*/
case 1: year = 24; break;
/**
* Определение числа месяцев для кейса 2 означающего 3 года
*/
case 2: year = 36; break;
/**
* Определение числа месяцев для кейса 3 означающего 4 года
*/
case 3: year = 48; break; 
/**
* Определение числа месяцев для кейса 4 означающего 5 лет
*/
case 4: year = 60; break; 
/**
* Завершение работы оператора выбора
*/
}
/**
* Использование оператора выбора для определения числа месяцев
*/
switch(months){
/**
* Определение числа месяцев для кейса 0 
*/
case 0: month = 0; break;
/**
* Определение числа месяцев для кейса 1 
*/
case 1: month = 1; break;
/**
* Определение числа месяцев для кейса 2 
*/
case 2: month = 2; break;
/**
* Определение числа месяцев для кейса 3 
*/
case 3: month = 3; break;
/**
* Определение числа месяцев для кейса 4 
*/
case 4: month = 4; break;
/**
* Определение числа месяцев для кейса 5 
*/
case 5: month = 5; break;
/**
* Определение числа месяцев для кейса 6 
*/
case 6: month = 6; break;
/**
* Определение числа месяцев для кейса 7 
*/
case 7: month = 7; break;
/**
* Определение числа месяцев для кейса 8 
*/
case 8: month = 8; break;
/**
* Определение числа месяцев для кейса 9 
*/
case 9: month = 9; break;
/**
* Определение числа месяцев для кейса 10 
*/
case 10: month = 10; break;
/**
* Определение числа месяцев для кейса 11 
*/
case 11: month = 11; break;
/**
* Завершение работы оператора выбора для определения числа месяцев
*/
}
/**
* Объявление переменной Время и расчет времени в сумме
*/
int time = year + month;
/**
* Установка условия отклонения кредита
*/
if ((sum*(1+(bet*(time/12)))/time > mainProfit) || (Integer.parseInt(Age.getText()) < 18)){
/**
* Установдение текста "Отклонен" в текстовом поле Статус при выполнении условия
*/
Status.setText("Отклонен");
/**
* Объвление пустой строки в тектовом поле Оплата при выполнении условия 
*/
Payment.setText("");
/**
* Дествия при невыполнении условия
*/
}else{
/**
* Установдение текста "Одобрен" в текстовом поле Статус 
*/
Status.setText("Одобрен");
/**
* Присваивание значения расчета в текстовое поле Оплата
*/
Payment.setText(cc.getP(sum, bet, time));
/**
* Завершения установки условий выдачи кредита
*/
}
/**
* Завершение работы объекта для рассчета кредита
*/
}
/**
* Завершение создания события для кнопки "Рассчитать"
*/
});
/**
* Добавление кнопки Рассчитать на форму
*/
getContentPane().add(Сalculation);
/**
* Завершение конструктора Кредитор
*/
}
/**
* Объвление метода Надпись
*/
private void Label(String attribute, int x,int y,int width,int height,int Columns) {
/**
* Объявление новой надписи
*/
	JLabel label = new JLabel(attribute);
/**
* Установка  шрифта, фона и размера надписи
*/
	label.setFont(new Font("Tahoma", Font.PLAIN, Columns));
/**
* Установка местоположения
*/
	label.setBounds(x, y, width, height);
/**
* Добавление надписи на форму
*/
	getContentPane().add(label);
/**
*Завершение мотода Надпись
*/
} 
/**
*Завершение работы класса для реализации формы Кредитор
*/
} 

